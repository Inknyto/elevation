import React, { useState, useEffect, useRef, useContext } from 'react';
import { ReactComponent as Logo } from './Icons/assets/logo.svg';
import { Icons } from './Icons/Icons';
import SearchComponent from './SearchEngine/SearchComponent';
import JobMap from './Map/JobMap'; // Import the Map component
import FooterComponent from './Footer/FooterComponent';
import LetterComponent from './Letter/LetterComponent';
import LoginComponent from './Login/LoginComponent';
import UserComponent from './User/UserComponent';
import { ChosenResultProvider } from 'SearchEngine/ChosenResultContext';
import EntreprisesComponent from './Entreprises/EntreprisesComponent';
 
import { AuthContext } from './Login/AuthContext'; // Import the AuthContext
//
 // console.log(AuthContext, AuthProvider)
const App = () => {
  const { isLoggedIn, setIsLoggedIn } = useContext(AuthContext);
//	console.log('imported isLoggedIn: ',isLoggedIn)
  const [currentView, setCurrentView] = useState('search');
  // const [previousView, setPreviousView] = useState(''); // Removed

  // useRef is utilized for storing the previous view
  const previousView = useRef();

  const onLogin = (token, username) => {
    setCurrentView(previousView.current);
    sessionStorage.setItem('token', token);
    sessionStorage.setItem('username', username);
    setIsLoggedIn(true)
//	  console.log('isLoggedIn from App.js(imported from context): ', isLoggedIn)
  };

	// works like a charm
  useEffect(() => {
    // console.log('isLoggedIn from App.js (imported from context): ', isLoggedIn);
  }, [isLoggedIn]); // useEffect will run when isLoggedIn changes



  const jobs = [
    // ... job data
  ];

  const renderCurrentView = () => {
    switch (currentView) {
      case 'search':
        return (
          <SearchComponent
            currentView={currentView}
            setCurrentView={setCurrentView}
          />
        );
      case 'map':
        return <JobMap jobs={jobs} />;
      // Add more cases for other views as needed
      case 'letter':
        return <LetterComponent />;
      case 'login':
          return isLoggedIn ? <UserComponent /> : <LoginComponent onLogin={onLogin} />;
    //    return <LoginComponent onLogin={onLogin} />;
//      case 'user':
  //      return <UserComponent />;
      case 'entreprises':
        return (
          <EntreprisesComponent
            currentView={currentView}
            setCurrentView={setCurrentView}
          />
        );
      default:
        return null;
    }
  };

  const handleIconClick = (view) => {
    previousView.current = currentView;
    setCurrentView(view);
  };

  // Save the current view to the useRef before updating on component unmount
  useEffect(() => {
    return () => {
      previousView.current = currentView;
    };
  }, [currentView]);

  return (
    <ChosenResultProvider>
      <div className="app">
        <Logo />
        <Icons onIconClick={handleIconClick} />

        {/* Conditionally render the current view based on the switch statement */}
        {renderCurrentView()}

        <FooterComponent />
      </div>
    </ChosenResultProvider>
  );
};

export default App;
