const express = require('express');
const cors = require('cors');
const { createProxyMiddleware } = require('http-proxy-middleware');

const app = express();
app.use(cors());
const port = 8080; 

// Define the Elasticsearch endpoint
const elasticsearchEndpoint = 'http://localhost:9200';

// Create a proxy for Elasticsearch requests
const elasticProxy = createProxyMiddleware({
  target: elasticsearchEndpoint,
  changeOrigin: false,
  pathRewrite: {
    '^/elasticsearch': '', // Remove the '/elasticsearch' prefix
  },
});

// Set CORS headers for all routes
app.use((req, res, next) => {
  // Allow all origins (you might want to make this more restrictive in production)
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE');
  res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization');
  res.header('Access-Control-Allow-Credentials', 'true');

  // Continue to the next middleware
  next();
});

// Use the proxy for paths starting with '/elasticsearch'
app.use('/elasticsearch', elasticProxy);

// Generic error handler
app.use((err, req, res, next) => {
  console.error(err);
  res.status(500).send('Internal Server Error');
});
app.get('/',(req, res) => {
  res.send(`Welcome to the Elasticsearch proxy server!
	  Endpoint: /elastic`)

})
// Start the server
app.listen(port, () => {
  console.log(`Elasticsearch proxy is running on http://localhost:${port}`);
});
